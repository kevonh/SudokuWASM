@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@inherits ErrorBoundaryBase
@inject ILogger<GameErrorBoundary> Logger

<div class="error-boundary">
    @if (CurrentException is null)
    {
        @ChildContent
    }
    else
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-xl p-6 max-w-md w-full text-center">
                <div class="text-4xl mb-4 text-red-500">
                    <i class="bi bi-exclamation-triangle"></i>
                </div>
                <h2 class="text-xl font-bold text-gray-800 mb-2">Oops! Something went wrong</h2>
                <p class="text-gray-600 mb-4">
                    The game encountered an unexpected error, but your progress should be saved.
                </p>
                
                @if (ShowDetails)
                {
                    <div class="bg-gray-100 p-3 rounded text-left text-sm mb-4 max-h-32 overflow-y-auto">
                        <strong>Error Details:</strong><br/>
                        @CurrentException?.Message
                    </div>
                }
                
                <div class="flex gap-2 justify-center">
                    <button class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg transition-colors"
                            @onclick="Recover">
                        Try Again
                    </button>
                    <button class="bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-2 px-4 rounded-lg transition-colors"
                            @onclick="() => ShowDetails = !ShowDetails">
                        @(ShowDetails ? "Hide" : "Show") Details
                    </button>
                    <button class="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded-lg transition-colors"
                            @onclick="ReloadPage">
                        Reload Game
                    </button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool ShowDetails = false;

    protected override Task OnErrorAsync(Exception exception)
    {
        // Log the error using proper logging instead of Console.WriteLine
        Logger.LogError(exception, "Error boundary caught exception: {Message}", exception.Message);
        return Task.CompletedTask;
    }

    private void ReloadPage()
    {
        // Reload the current page
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
    }
    
    [Inject] private NavigationManager Navigation { get; set; } = default!;
}
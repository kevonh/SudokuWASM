@using Sudoku

<!-- Main Sudoku Grid -->
<div class="@(IsMobile ? "w-full max-w-sm" : "flex-shrink-0") relative">
    <div class="@(IsMobile ? "" : "bg-white rounded-xl shadow-2xl p-6 border border-gray-200")">
        <div class="grid grid-cols-3 gap-1 bg-gray-800 p-1 sm:p-2 rounded-lg" @onclick="OnGridClick">
            @for (int blockRow = 0; blockRow < 3; blockRow++)
            {
                @for (int blockCol = 0; blockCol < 3; blockCol++)
                {
                    <div class="grid grid-cols-3 gap-0.5 bg-gray-800 rounded">
                        @for (int cellRow = 0; cellRow < 3; cellRow++)
                        {
                            @for (int cellCol = 0; cellCol < 3; cellCol++)
                            {
                                var row = blockRow * 3 + cellRow;
                                var col = blockCol * 3 + cellCol;
                                var cellClass = GetCellCSS(row, col);
                                var textClass = GetCellTextCSS(row, col);
                                var combinedTextClass = IsMobile ? $"text-sm sm:text-base md:text-lg {textClass}" : textClass;

                                @if (IsMobile)
                                {
                                    <div class="@cellClass" @onclick="() => HandleCellClick(row, col)" @ontouchstart="() => HandleCellClick(row, col)">
                                        @if (Board!.FixedCells[row, col] || Board.HintCells[row, col])
                                        {
                                            <span class="text-sm sm:text-base md:text-lg">@(Board.Grid[row, col] == 0 ? "" : Board.Grid[row, col])</span>
                                        }
                                        else if (Board.Grid[row, col] != 0)
                                        {
                                            <span class="@combinedTextClass">@Board.Grid[row, col]</span>
                                        }
                                        else
                                        {
                                            <div class="grid grid-cols-3 gap-0 text-[8px] sm:text-xs text-gray-400 w-full h-full">
                                                @for (int n = 1; n <= 9; n++)
                                                {
                                                    <div class="flex items-center justify-center">
                                                        <span class="@(Board.Notes[row, col].Contains(n) ? "text-gray-600" : "opacity-0")">@n</span>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="@cellClass" @onclick="() => HandleCellClick(row, col)">
                                        @if (Board!.FixedCells[row, col] || Board.HintCells[row, col])
                                        {
                                            <span>@(Board.Grid[row, col] == 0 ? "" : Board.Grid[row, col])</span>
                                        }
                                        else if (Board.Grid[row, col] != 0)
                                        {
                                            <span class="@textClass">@Board.Grid[row, col]</span>
                                        }
                                        else
                                        {
                                            <div class="grid grid-cols-3 gap-0 text-xs text-gray-400 w-full h-full">
                                                @for (int n = 1; n <= 9; n++)
                                                {
                                                    <div class="flex items-center justify-center text-xs">
                                                        <span class="@(Board.Notes[row, col].Contains(n) ? "text-gray-600" : "opacity-0")">@n</span>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        }
                    </div>
                }
            }
        </div>
    </div>
    
    <!-- Pause Overlay -->
    <PauseOverlay IsGamePaused="IsGamePaused" 
                  IsMobile="IsMobile"
                  OnResumeClick="OnResumeGame" />
</div>

@code {
    [Parameter] public SudokuBoard? Board { get; set; }
    [Parameter] public bool IsMobile { get; set; }
    [Parameter] public bool IsGamePaused { get; set; }
    [Parameter] public EventCallback OnGridClick { get; set; }
    [Parameter] public EventCallback OnResumeGame { get; set; }
    [Parameter] public EventCallback<(int row, int col)> OnCellClick { get; set; }
    [Parameter] public Func<int, int, string> GetCellCSS { get; set; } = default!;
    [Parameter] public Func<int, int, string> GetCellTextCSS { get; set; } = default!;

    private async Task HandleCellClick(int row, int col)
    {
        await OnCellClick.InvokeAsync((row, col));
    }
}
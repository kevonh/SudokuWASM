@using Sudoku

<!-- Mobile Layout -->
<div class="md:hidden flex flex-col gap-2 items-center">
    <!-- 1. Sudoku Grid - FIRST -->
    <SudokuGrid Board="Board"
                IsMobile="true"
                IsGamePaused="IsGamePaused"
                OnGridClick="OnGridClick"
                OnResumeGame="OnResumeGame"
                OnCellClick="OnCellClick"
                GetCellCSS="GetCellCSS"
                GetCellTextCSS="GetCellTextCSS" />

    <!-- 2. Game Controls (Mobile) -->
    <div class="w-full max-w-sm">
        <GameControls OnUndo="OnUndo"
                      OnErase="OnErase"
                      OnTogglePencilMode="OnTogglePencilMode"
                      OnGiveHint="OnGiveHint"
                      OnShowStatistics="OnShowStatistics"
                      IsGameDisabled="@(IsGameOver || IsGameWon || IsGamePaused)"
                      CanUndo="@(CanUndo && !IsGameOver && !IsGameWon)"
                      CanErase="@(CanErase && !IsGameOver && !IsGameWon)"
                      CanGiveHint="@(Board != null && !Board.IsComplete() && !IsGameOver && !IsGameWon && !IsGamePaused)"
                      IsPencilMode="IsPencilMode"
                      IsMobile="true" />
    </div>

    <!-- 3. Number Pad (Mobile) -->
    <div class="w-full max-w-sm">
        <NumberPad OnNumberClick="OnNumberPadClick"
                   IsNumberDisabled="IsNumberDisabled"
                   IsMobile="true" />
    </div>

    <!-- 4. Score Area (Mobile) -->
    <div class="w-full max-w-sm">
        <ScoreArea OnTogglePause="OnTogglePause"
                   Score="Score"
                   ElapsedTime="@ElapsedTime"
                   WrongGuessCount="WrongGuessCount"
                   MaxWrongGuesses="MaxWrongGuesses"
                   HintCount="HintCount"
                   IsGamePaused="IsGamePaused"
                   IsPointsAnimating="IsPointsAnimating"
                   IsMobile="true" />
    </div>

    <!-- 5. Difficulty + New Game (Mobile) -->
    <div class="w-full max-w-sm">
        <DifficultySelector OnDifficultyChanged="OnDifficultyChanged"
                            OnNewGame="OnNewGame"
                            SelectedDifficulty="SelectedDifficulty"
                            IsMobile="true" />
    </div>
</div>

@code {
    [Parameter] public SudokuBoard? Board { get; set; }
    [Parameter] public bool IsGamePaused { get; set; }
    [Parameter] public bool IsGameOver { get; set; }
    [Parameter] public bool IsGameWon { get; set; }
    [Parameter] public bool CanUndo { get; set; }
    [Parameter] public bool CanErase { get; set; }
    [Parameter] public bool IsPencilMode { get; set; }
    [Parameter] public bool IsPointsAnimating { get; set; }
    [Parameter] public int Score { get; set; }
    [Parameter] public string ElapsedTime { get; set; } = "00:00";
    [Parameter] public int WrongGuessCount { get; set; }
    [Parameter] public int MaxWrongGuesses { get; set; }
    [Parameter] public int HintCount { get; set; }
    [Parameter] public string SelectedDifficulty { get; set; } = "Medium";
    
    [Parameter] public EventCallback OnGridClick { get; set; }
    [Parameter] public EventCallback OnResumeGame { get; set; }
    [Parameter] public EventCallback<(int row, int col)> OnCellClick { get; set; }
    [Parameter] public EventCallback OnUndo { get; set; }
    [Parameter] public EventCallback OnErase { get; set; }
    [Parameter] public EventCallback OnTogglePencilMode { get; set; }
    [Parameter] public EventCallback OnGiveHint { get; set; }
    [Parameter] public EventCallback OnShowStatistics { get; set; }
    [Parameter] public EventCallback<int> OnNumberPadClick { get; set; }
    [Parameter] public EventCallback OnTogglePause { get; set; }
    [Parameter] public EventCallback<string> OnDifficultyChanged { get; set; }
    [Parameter] public EventCallback OnNewGame { get; set; }
    
    [Parameter] public Func<int, int, string> GetCellCSS { get; set; } = default!;
    [Parameter] public Func<int, int, string> GetCellTextCSS { get; set; } = default!;
    [Parameter] public Func<int, bool> IsNumberDisabled { get; set; } = default!;
}